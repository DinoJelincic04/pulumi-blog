name: Pulumi blog action 
on: [workflow_dispatch]
jobs:
  preview:
    name: Preview
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2     
      - name: Set up Python 3.8                               
        uses: actions/setup-python@v2                               
        with:                                 
          python-version: '3.8' 

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - run: pip install -r requirements.txt
      - uses: pulumi/actions@v3
        with:
          #command: destroy
          #command: preview
          command: up
          stack-name: DinoJelincic/eks-pulumi-blog/develop
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }} 

      - name: Check for Dockerfile changes
        id: check-dockerfile-changes
        run: |
          if git diff HEAD^ HEAD --name-only | grep -q 'Dockerfile'; then
            echo "Dockerfile has changed. Proceeding with image build."
            echo "::set-output name=build_image::true"
          else
            echo "No changes in Dockerfile. Skipping image build."
            echo "::set-output name=build_image::false"
          fi

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, publish, and deploy image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: blog-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          if [ ${{ steps.check-dockerfile-changes.outputs.build_image }} == 'true' ]; then
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./flask_app > docker_build.log 2>&1
            if [ $? -eq 0 ]; then
              echo "Docker build is successful."
            else
              echo "Docker build failed. Check previous created docker_build.log for details."
              cat docker_build.log
              exit 1
            fi
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          else
            echo "Skip image build as there are no changes in Dockerfile."
          fi





# - name: Build, tag, and push image to Amazon ECR
#     id: build-image
#     env:
#     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#     run: |
#     cd site
#     docker image build \
#     --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest \
#     --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.SHORT_SHA }} \
#     .
#     docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
#     docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.SHORT_SHA }}
    
# - name: Install and configure kubectl
#     run: |
#     VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
#     curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
#         --progress-bar \
#         --location \
#         --remote-name
#     chmod +x kubectl
#     sudo mv kubectl /usr/local/bin/
#     echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yaml
    
# - name: Deploy
#     env:
#     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#     run: |
#     export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
#     export IMAGE_TAG=${{ env.SHORT_SHA }}
#     export KUBECONFIG=kubeconfig.yaml
#     envsubst < k8s/kustomization.tmpl.yaml > k8s/kustomization.yaml
#     kubectl kustomize k8s | kubectl apply -f -